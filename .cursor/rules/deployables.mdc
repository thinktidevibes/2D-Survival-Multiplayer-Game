---
description: Guide for adding new deployable items (e.g., structures, placeables) to the world.
globs: 
alwaysApply: false
---
# Guide: Adding New Deployable Items

This guide outlines the general steps to add a new deployable item (like campfires, storage boxes, or sleeping bags) to the game. Replace bracketed placeholders (e.g., `[Item Name]`, `[item_name]`) with your specific item's details.

## 1. Server: Define the Item

*   **File:** [`server/src/items_database.rs`](mdc:server/src/items_database.rs)
*   **Action:** Add a new `ItemDefinition` struct entry for your `[Item Name]`.
        *   Set `category: ItemCategory::Placeable`.
    *   Set `icon_asset_name: "[item_name].png"`.
    *   Configure `is_stackable` (usually `false` for placeables), `stack_size` (usually `1`), `is_equippable: false`.
    *   *(Optional)* Define a crafting recipe later if needed.

## 2. Server: Create the Entity Logic

*   **New File:** `server/src/[item_name].rs`
*   **Action:**
    *   Define the `[ItemName]` struct (e.g., `SleepingBag`) with `#[spacetimedb::table(name = [item_name], public)]`.
    *   **Required Fields:** `id: u32` (PK, auto_inc), `pos_x: f32`, `pos_y: f32`, `chunk_index: u32`, `placed_by: Identity`, `placed_at: Timestamp`. Add other fields as needed for the item's function.
    *   Add collision/interaction constants (copy/adapt from [`server/src/wooden_storage_box.rs`](mdc:server/src/wooden_storage_box.rs) or [`server/src/campfire.rs`](mdc:server/src/campfire.rs)).
    *   Implement `place_[item_name]` reducer:
        *   Find your item's definition ID.
        *   Validate the item instance (ownership, type).
        *   Validate placement distance/collision.
        *   Consume the item from player inventory/hotbar (using helpers from [`server/src/items.rs`](mdc:server/src/items.rs) or [`server/src/inventory_management.rs`](mdc:server/src/inventory_management.rs)).
        *   Calculate `chunk_index` using `calculate_chunk_index` from [`server/src/environment.rs`](mdc:server/src/environment.rs).
        *   Insert the new `[ItemName]` entity.
    *   Implement `interact_with_[item_name]` reducer (at least basic distance check if interaction is needed).
    *   Implement `pickup_[item_name]` reducer (if applicable):
        *   Validate interaction.
        *   Check if pickup conditions met (e.g., empty).
        *   Add item back to player inventory using `add_item_to_player_inventory` from [`server/src/items.rs`](mdc:server/src/items.rs).
        *   Delete the entity if item added successfully.
    *   Implement `validate_[item_name]_interaction` helper (if needed).
*   **File:** [`server/src/lib.rs`](mdc:server/src/lib.rs)
*   **Action:**
    *   Add `mod [item_name];`
    *   Add `pub use crate::[item_name]::[ItemName];` near the end of the file.
    *   Add `use crate::[item_name]::[item_name] as [ItemName]TableTrait;` to the table trait imports near the top.

## 3. Server: Update Starting Items (Optional)

*   **File:** [`server/src/starting_items.rs`](mdc:server/src/starting_items.rs)
*   **Action:** If players should start with this item, add an entry for `"[Item Name]"` to the `starting_inv_items` array.

## 4. Client: Map the Icon

*   **File:** [`client/src/utils/itemIconUtils.ts`](mdc:client/src/utils/itemIconUtils.ts)
*   **Action:**
    *   Import the icon: `import [itemName]Icon from '../assets/items/[item_name].png';`
    *   Add the mapping to `itemIcons`: `'[item_name].png': [itemName]Icon`.

## 5. Client: Create Rendering & Type Logic

*   **File:** [`client/src/config/gameConfig.ts`](mdc:client/src/config/gameConfig.ts)
*   **Action:** Define constants for the item's dimensions (e.g., `[ITEM_NAME]_WIDTH`, `[ITEM_NAME]_HEIGHT`).
*   **File:** [`client/src/utils/typeGuards.ts`](mdc:client/src/utils/typeGuards.ts)
*   **Action:**
    *   Import `[ItemName] as SpacetimeDB[ItemName]` from `../generated`.
    *   Add `is[ItemName](mdc:entity: any): entity is SpacetimeDB[ItemName]` type guard.
*   **New File:** `client/src/utils/[itemName]RenderingUtils.ts`
*   **Action:**
    *   Implement `render[ItemName](mdc:...)` to draw the item (using dimensions from `gameConfig`).
    *   Implement `preload[ItemName]Image(...)` if needed.

## 6. Client: Integrate Rendering & Placement

*   **File:** [`client/src/utils/renderingUtils.ts`](mdc:client/src/utils/renderingUtils.ts)
*   **Action:**
    *   Import `render[ItemName]` and `is[ItemName]`.
    *   Add `SpacetimeDB[ItemName]` to the `Entity` type union.
    *   In `renderGroundEntities` or `renderYSortedEntities` (depending on item type), add check `if (is[ItemName](mdc:entity))` and call `render[ItemName]`. *Crucial for drawing!* 
*   **File:** [`client/src/utils/placementRenderingUtils.ts`](mdc:client/src/utils/placementRenderingUtils.ts)
*   **Action:** Update `renderPlacementPreview`:
    *   Import dimensions from `gameConfig`.
    *   Add an `else if` check for `placementInfo.iconAssetName === '[item_name].png'` to set the correct `drawWidth` and `drawHeight`. *Crucial for placement preview size!* 
*   **File:** [`client/src/hooks/usePlacementManager.ts`](mdc:client/src/hooks/usePlacementManager.ts)
*   **Action:** In the `attemptPlacement` function's `switch` statement, add a `case '[Item Name]':` that calls the correct server reducer (`connection.reducers.place_[item_name](mdc:...)`). *Crucial for initiating placement!* 

## 7. Client: Integrate State Management & Filtering

*   **File:** [`client/src/hooks/useSpacetimeTables.ts`](mdc:client/src/hooks/useSpacetimeTables.ts)
*   **Action:**
    *   Import `[ItemName] as SpacetimeDB[ItemName]`.
    *   Add state map: `const [[itemName]s, set[ItemName]s] = useState<Map<string, SpacetimeDB[ItemName]>>(new Map());`
    *   Define and Register SpacetimeDB callbacks (`handle[ItemName]Insert`, etc.) to update the state map. **Ensure the `Insert` callback calls `cancelPlacementRef.current()` on success.**
    *   Add the `[ItemName]` table to the spatial subscription queries within the main `useEffect`.
    *   Add `set[ItemName]s(new Map())` to the cleanup function.
    *   Return `[itemName]s` from the hook.
*   **File:** [`client/src/hooks/useEntityFiltering.ts`](mdc:client/src/hooks/useEntityFiltering.ts) (or similar logic if not refactored)
*   **Action:**
    *   Add `[itemName]s: Map<string, SpacetimeDB[ItemName]>` as an input parameter.
    *   Import `SpacetimeDB[ItemName]` and `is[ItemName]`.
    *   Add a case for `is[ItemName]` to `isEntityInView`.
    *   Add a `useMemo` hook to calculate `visible[ItemName]s` based on the input map and `isEntityInView`.
    *   Include `visible[ItemName]s` in the appropriate rendering group (`groundItems` or `ySortedEntities`).
    *   Add `visible[ItemName]s` to the hook's return type and object. *Crucial for making the entity data available for rendering!* 
*   **File:** [`client/src/App.tsx`](mdc:client/src/App.tsx)
*   **Action:**
    *   Destructure `[itemName]s` from `useSpacetimeTables`.
    *   Pass `[itemName]s` prop to `GameScreen`.
*   **File:** [`client/src/components/GameScreen.tsx`](mdc:client/src/components/GameScreen.tsx)
*   **Action:**
    *   Add `[itemName]s` to `GameScreenProps`.
    *   Pass `[itemName]s` prop to `GameCanvas`.
*   **File:** [`client/src/components/GameCanvas.tsx`](mdc:client/src/components/GameCanvas.tsx)
*   **Action:**
    *   Add `[itemName]s` to `GameCanvasProps`.
    *   **If using `useEntityFiltering` hook:** Pass `[itemName]s` to the hook call. Ensure the hook's results (`groundItems`, `ySortedEntities`) are used in `renderGame` and have correct dependencies.
    *   **If NOT using the hook:** Implement the filtering logic directly: add `visible[ItemName]s` calculation using `useMemo`, include it in `groundItems` or `ySortedEntities`, and ensure all relevant `useMemo`/`useCallback` dependency arrays include `[itemName]s`. *Crucial for triggering re-renders!* 

## 8. Client: Interaction Logic (If Applicable)

*   **File:** [`client/src/utils/labelRenderingUtils.ts`](mdc:client/src/utils/labelRenderingUtils.ts)
*   **Action:**
    *   Add `[itemName]s: Map<string, SpacetimeDB[ItemName]>` and `closestInteractable[ItemName]Id` to params.
    *   Add logic to find the closest entity and draw the appropriate interaction label (e.g., "Pickup [E]", "Use [E]").
*   **File:** [`client/src/hooks/useInteractionFinder.ts`](mdc:client/src/hooks/useInteractionFinder.ts)
*   **Action:**
    *   Add `[itemName]s` map to props.
    *   Add state for `closestInteractable[ItemName]Id`.
    *   Update effect to find the closest interactable `[ItemName]` based on distance and conditions.
    *   Return the ID.
*   **File:** [`client/src/hooks/useInputHandler.ts`](mdc:client/src/hooks/useInputHandler.ts)
*   **Action:**
    *   Add `closestInteractable[ItemName]Id` to props/dependencies.
    *   Add logic in `handleInteraction` (or similar handler for key presses like 'E') to call the correct interaction reducer (e.g., `pickup_[item_name]`, `interact_with_[item_name]`) when near the item.

## 9. Final Checks

*   Run `spacetime publish` on the server.
*   Run `spacetime generate` on the client.
*   Test placement, rendering, and interaction thoroughly.
*   Check browser console for errors.
*   Verify dependencies in all relevant `useMemo` and `useCallback` hooks.
