// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
import { CookingProgress as __CookingProgress } from "./cooking_progress_type";

export type Campfire = {
  id: number,
  posX: number,
  posY: number,
  chunkIndex: number,
  placedBy: Identity,
  placedAt: Timestamp,
  isBurning: boolean,
  fuelInstanceId0: bigint | undefined,
  fuelDefId0: bigint | undefined,
  fuelInstanceId1: bigint | undefined,
  fuelDefId1: bigint | undefined,
  fuelInstanceId2: bigint | undefined,
  fuelDefId2: bigint | undefined,
  fuelInstanceId3: bigint | undefined,
  fuelDefId3: bigint | undefined,
  fuelInstanceId4: bigint | undefined,
  fuelDefId4: bigint | undefined,
  currentFuelDefId: bigint | undefined,
  remainingFuelBurnTimeSecs: number | undefined,
  health: number,
  maxHealth: number,
  isDestroyed: boolean,
  destroyedAt: Timestamp | undefined,
  lastHitTime: Timestamp | undefined,
  slot0CookingProgress: __CookingProgress | undefined,
  slot1CookingProgress: __CookingProgress | undefined,
  slot2CookingProgress: __CookingProgress | undefined,
  slot3CookingProgress: __CookingProgress | undefined,
  slot4CookingProgress: __CookingProgress | undefined,
  lastDamageApplicationTime: Timestamp | undefined,
  isPlayerInHotZone: boolean,
};

/**
 * A namespace for generated helper functions.
 */
export namespace Campfire {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement("id", AlgebraicType.createU32Type()),
      new ProductTypeElement("posX", AlgebraicType.createF32Type()),
      new ProductTypeElement("posY", AlgebraicType.createF32Type()),
      new ProductTypeElement("chunkIndex", AlgebraicType.createU32Type()),
      new ProductTypeElement("placedBy", AlgebraicType.createIdentityType()),
      new ProductTypeElement("placedAt", AlgebraicType.createTimestampType()),
      new ProductTypeElement("isBurning", AlgebraicType.createBoolType()),
      new ProductTypeElement("fuelInstanceId0", AlgebraicType.createOptionType(AlgebraicType.createU64Type())),
      new ProductTypeElement("fuelDefId0", AlgebraicType.createOptionType(AlgebraicType.createU64Type())),
      new ProductTypeElement("fuelInstanceId1", AlgebraicType.createOptionType(AlgebraicType.createU64Type())),
      new ProductTypeElement("fuelDefId1", AlgebraicType.createOptionType(AlgebraicType.createU64Type())),
      new ProductTypeElement("fuelInstanceId2", AlgebraicType.createOptionType(AlgebraicType.createU64Type())),
      new ProductTypeElement("fuelDefId2", AlgebraicType.createOptionType(AlgebraicType.createU64Type())),
      new ProductTypeElement("fuelInstanceId3", AlgebraicType.createOptionType(AlgebraicType.createU64Type())),
      new ProductTypeElement("fuelDefId3", AlgebraicType.createOptionType(AlgebraicType.createU64Type())),
      new ProductTypeElement("fuelInstanceId4", AlgebraicType.createOptionType(AlgebraicType.createU64Type())),
      new ProductTypeElement("fuelDefId4", AlgebraicType.createOptionType(AlgebraicType.createU64Type())),
      new ProductTypeElement("currentFuelDefId", AlgebraicType.createOptionType(AlgebraicType.createU64Type())),
      new ProductTypeElement("remainingFuelBurnTimeSecs", AlgebraicType.createOptionType(AlgebraicType.createF32Type())),
      new ProductTypeElement("health", AlgebraicType.createF32Type()),
      new ProductTypeElement("maxHealth", AlgebraicType.createF32Type()),
      new ProductTypeElement("isDestroyed", AlgebraicType.createBoolType()),
      new ProductTypeElement("destroyedAt", AlgebraicType.createOptionType(AlgebraicType.createTimestampType())),
      new ProductTypeElement("lastHitTime", AlgebraicType.createOptionType(AlgebraicType.createTimestampType())),
      new ProductTypeElement("slot0CookingProgress", AlgebraicType.createOptionType(__CookingProgress.getTypeScriptAlgebraicType())),
      new ProductTypeElement("slot1CookingProgress", AlgebraicType.createOptionType(__CookingProgress.getTypeScriptAlgebraicType())),
      new ProductTypeElement("slot2CookingProgress", AlgebraicType.createOptionType(__CookingProgress.getTypeScriptAlgebraicType())),
      new ProductTypeElement("slot3CookingProgress", AlgebraicType.createOptionType(__CookingProgress.getTypeScriptAlgebraicType())),
      new ProductTypeElement("slot4CookingProgress", AlgebraicType.createOptionType(__CookingProgress.getTypeScriptAlgebraicType())),
      new ProductTypeElement("lastDamageApplicationTime", AlgebraicType.createOptionType(AlgebraicType.createTimestampType())),
      new ProductTypeElement("isPlayerInHotZone", AlgebraicType.createBoolType()),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: Campfire): void {
    Campfire.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): Campfire {
    return Campfire.getTypeScriptAlgebraicType().deserialize(reader);
  }

}


