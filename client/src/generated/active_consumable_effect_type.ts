// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
import { EffectType as __EffectType } from "./effect_type_type";

export type ActiveConsumableEffect = {
  effectId: bigint,
  playerId: Identity,
  itemDefId: bigint,
  consumingItemInstanceId: bigint | undefined,
  startedAt: Timestamp,
  endsAt: Timestamp,
  totalAmount: number | undefined,
  amountAppliedSoFar: number | undefined,
  effectType: __EffectType,
  tickIntervalMicros: bigint,
  nextTickAt: Timestamp,
};

/**
 * A namespace for generated helper functions.
 */
export namespace ActiveConsumableEffect {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement("effectId", AlgebraicType.createU64Type()),
      new ProductTypeElement("playerId", AlgebraicType.createIdentityType()),
      new ProductTypeElement("itemDefId", AlgebraicType.createU64Type()),
      new ProductTypeElement("consumingItemInstanceId", AlgebraicType.createOptionType(AlgebraicType.createU64Type())),
      new ProductTypeElement("startedAt", AlgebraicType.createTimestampType()),
      new ProductTypeElement("endsAt", AlgebraicType.createTimestampType()),
      new ProductTypeElement("totalAmount", AlgebraicType.createOptionType(AlgebraicType.createF32Type())),
      new ProductTypeElement("amountAppliedSoFar", AlgebraicType.createOptionType(AlgebraicType.createF32Type())),
      new ProductTypeElement("effectType", __EffectType.getTypeScriptAlgebraicType()),
      new ProductTypeElement("tickIntervalMicros", AlgebraicType.createU64Type()),
      new ProductTypeElement("nextTickAt", AlgebraicType.createTimestampType()),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: ActiveConsumableEffect): void {
    ActiveConsumableEffect.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): ActiveConsumableEffect {
    return ActiveConsumableEffect.getTypeScriptAlgebraicType().deserialize(reader);
  }

}


