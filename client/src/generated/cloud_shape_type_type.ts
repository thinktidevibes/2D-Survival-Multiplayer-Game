// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace CloudShapeType {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type CloudImage1 = { tag: "CloudImage1" };
  export type CloudImage2 = { tag: "CloudImage2" };
  export type CloudImage3 = { tag: "CloudImage3" };
  export type CloudImage4 = { tag: "CloudImage4" };
  export type CloudImage5 = { tag: "CloudImage5" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const CloudImage1 = { tag: "CloudImage1" };
  export const CloudImage2 = { tag: "CloudImage2" };
  export const CloudImage3 = { tag: "CloudImage3" };
  export const CloudImage4 = { tag: "CloudImage4" };
  export const CloudImage5 = { tag: "CloudImage5" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("CloudImage1", AlgebraicType.createProductType([])),
      new SumTypeVariant("CloudImage2", AlgebraicType.createProductType([])),
      new SumTypeVariant("CloudImage3", AlgebraicType.createProductType([])),
      new SumTypeVariant("CloudImage4", AlgebraicType.createProductType([])),
      new SumTypeVariant("CloudImage5", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: CloudShapeType): void {
      CloudShapeType.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): CloudShapeType {
      return CloudShapeType.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `CloudShapeType`.
export type CloudShapeType = CloudShapeType.CloudImage1 | CloudShapeType.CloudImage2 | CloudShapeType.CloudImage3 | CloudShapeType.CloudImage4 | CloudShapeType.CloudImage5;

export default CloudShapeType;

