// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
import { InventoryLocationData as __InventoryLocationData } from "./inventory_location_data_type";
import { HotbarLocationData as __HotbarLocationData } from "./hotbar_location_data_type";
import { EquippedLocationData as __EquippedLocationData } from "./equipped_location_data_type";
import { ContainerLocationData as __ContainerLocationData } from "./container_location_data_type";
import { DroppedLocationData as __DroppedLocationData } from "./dropped_location_data_type";

// A namespace for generated variants and helper functions.
export namespace ItemLocation {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type Inventory = { tag: "Inventory", value: __InventoryLocationData };
  export type Hotbar = { tag: "Hotbar", value: __HotbarLocationData };
  export type Equipped = { tag: "Equipped", value: __EquippedLocationData };
  export type Container = { tag: "Container", value: __ContainerLocationData };
  export type Dropped = { tag: "Dropped", value: __DroppedLocationData };
  export type Unknown = { tag: "Unknown" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Inventory = (value: __InventoryLocationData): ItemLocation => ({ tag: "Inventory", value });
  export const Hotbar = (value: __HotbarLocationData): ItemLocation => ({ tag: "Hotbar", value });
  export const Equipped = (value: __EquippedLocationData): ItemLocation => ({ tag: "Equipped", value });
  export const Container = (value: __ContainerLocationData): ItemLocation => ({ tag: "Container", value });
  export const Dropped = (value: __DroppedLocationData): ItemLocation => ({ tag: "Dropped", value });
  export const Unknown = { tag: "Unknown" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("Inventory", __InventoryLocationData.getTypeScriptAlgebraicType()),
      new SumTypeVariant("Hotbar", __HotbarLocationData.getTypeScriptAlgebraicType()),
      new SumTypeVariant("Equipped", __EquippedLocationData.getTypeScriptAlgebraicType()),
      new SumTypeVariant("Container", __ContainerLocationData.getTypeScriptAlgebraicType()),
      new SumTypeVariant("Dropped", __DroppedLocationData.getTypeScriptAlgebraicType()),
      new SumTypeVariant("Unknown", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: ItemLocation): void {
      ItemLocation.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): ItemLocation {
      return ItemLocation.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `ItemLocation`.
export type ItemLocation = ItemLocation.Inventory | ItemLocation.Hotbar | ItemLocation.Equipped | ItemLocation.Container | ItemLocation.Dropped | ItemLocation.Unknown;

export default ItemLocation;

