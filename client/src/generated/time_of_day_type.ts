// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace TimeOfDay {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type Dawn = { tag: "Dawn" };
  export type TwilightMorning = { tag: "TwilightMorning" };
  export type Morning = { tag: "Morning" };
  export type Noon = { tag: "Noon" };
  export type Afternoon = { tag: "Afternoon" };
  export type Dusk = { tag: "Dusk" };
  export type TwilightEvening = { tag: "TwilightEvening" };
  export type Night = { tag: "Night" };
  export type Midnight = { tag: "Midnight" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Dawn = { tag: "Dawn" };
  export const TwilightMorning = { tag: "TwilightMorning" };
  export const Morning = { tag: "Morning" };
  export const Noon = { tag: "Noon" };
  export const Afternoon = { tag: "Afternoon" };
  export const Dusk = { tag: "Dusk" };
  export const TwilightEvening = { tag: "TwilightEvening" };
  export const Night = { tag: "Night" };
  export const Midnight = { tag: "Midnight" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("Dawn", AlgebraicType.createProductType([])),
      new SumTypeVariant("TwilightMorning", AlgebraicType.createProductType([])),
      new SumTypeVariant("Morning", AlgebraicType.createProductType([])),
      new SumTypeVariant("Noon", AlgebraicType.createProductType([])),
      new SumTypeVariant("Afternoon", AlgebraicType.createProductType([])),
      new SumTypeVariant("Dusk", AlgebraicType.createProductType([])),
      new SumTypeVariant("TwilightEvening", AlgebraicType.createProductType([])),
      new SumTypeVariant("Night", AlgebraicType.createProductType([])),
      new SumTypeVariant("Midnight", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: TimeOfDay): void {
      TimeOfDay.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): TimeOfDay {
      return TimeOfDay.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `TimeOfDay`.
export type TimeOfDay = TimeOfDay.Dawn | TimeOfDay.TwilightMorning | TimeOfDay.Morning | TimeOfDay.Noon | TimeOfDay.Afternoon | TimeOfDay.Dusk | TimeOfDay.TwilightEvening | TimeOfDay.Night | TimeOfDay.Midnight;

export default TimeOfDay;

